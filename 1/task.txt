Úkolem je realizovat sadu tříd, která bude rychle dekódovat, analyzovat a řešit problémy předávané mimozemskou sondou.

V povídce "Hlídka" (orig. The Sentinel of Eternity) spisovatele A. C. Clarka je nalezena mimozemská sonda, která je proti vnějšímu prostředí chráněna neznámou bariérou. Lidstvo se snaží bariéru překonat a k sondě se dostat. Předpokládáme, že řešíme podobnou úlohu, kdy sonda povolí přístup pouze dostatečně vyspělé civilizaci, která zvládá přijímat, analyzovat a zpět odesílat vyřešené problémy, které byly tímto způsobem zadané. Úkolem je realizovat sadu tříd, které to zvládnou. Vyspělost civilizace se mj. pozná tím, že zadané problémy dokáže řešit rychle. Proto při řešení bude potřeba zapojit více vláken a výpočty paralelizovat.

Vlastní problém, který je potřeba řešit, je poměrně technický a vyžaduje více programování. Můžete vše vyřešit sami ve vlastní implementaci nebo můžete využít části hotové implementace a doplnit k nim pouze to, co chybí (rozhraní, práce s vlákny, synchronizace):

    Mimozemská sonda zasílá problémy k vyřešení. Jeden problém je popsaný jednou zprávou, každá zpráva má svůj jedinečný 27 bitový identifikátor. Zpráva je před odesíláním rozdělena do menších částí - fragmentů. Každý fragment má velikost 64 bitů a nese v sobě informaci o identifikátoru zprávy (message ID) a několik bitů zprávy (payload, length). Je-li ve fragmentu zasláno x bitů zprávy (např. 17), bude pole length nastaveno na hodnotu x-1 (tedy např. zde na 16). Bity fragmentu 0, 1, 2, ... x-1 obsahují část zprávy, bity x, x+1, x+2, ..., 31 nejsou využité a mohou obsahovat cokoliv. Strukturu fragmentu zachycuje obrázek:
    Sonda najednou vysílá fragmenty více různých zpráv, navíc zpřeházeně a z několika míst. Proto je před sestavením zpráv potřeba přijaté fragmenty seskupit podle identifikátoru zprávy. Přijímání fragmentů a jejich seskupení budete muset implementovat sami.
    Po seskupení fragmentů podle id zprávy je potřeba sestavit původní zprávu ve správné podobě. Fragmenty mohou být přijaté v libovolném pořadí, navíc není explicitně řečeno, z kolika fragmentů se zpráva skládá. Víme, že zpráva začíná kontrolním součtem CRC32, za kterým následuje bitové pole zadání problému. Správnost seskládání fragmentů lze otestovat tím, že spočtete CRC32 bitového pole a porovnáte je s prvními 32 bity zprávy. Pokud nedojde ke shodě, je potřeba zkusit jinou permutaci fragmentů nebo zatím nejsou k dispozici všechny fragmenty zprávy. Kontrolní součet CRC32 je implementovaný v testovacím prostředí i v dodané knihovně - funkce CalculateCRC32. V testovacím prostředí (i v dodané knihovně) je dále funkce FindPermutations, která pro zadané pole fragmentů zkusí všechny permutace a kontroluje CRC32 pro takto vzniklé zprávy. Pokud uspěje, předá nalezenou zprávu pomocí zadaného callbacku dále. Technicky může z jedné sady fragmentů vzniknout více zpráv, kde souhlasí CRC32 (je to nepravděpodobné, ale možné). Proto je výstup funkce FindPermutations řešen pomocí callbacku, aby bylo možné pracovat se všemi nalezenými zprávami. Detaily o funkcích CalculateCRC32 a FindPermutations naleznete níže v textu.
    Ze sestavené zprávy je potřeba odstranit CRC32 a vyřešit problém zadaný v těle zprávy (bitové pole - bitfield). Každý bit bitového pole představuje jednu hodnotu true (bit s hodnotou 1) nebo false (bit s hodnotou 0). Bity zpracováváme postupně od LSB (least significant bit) po MSB (most significant bit). Úkolem je do takto zapsaných boolovských hodnot umístit operátory AND, OR a XOR tak, aby vznikla hodnota true. Řešením problému je číslo udávající počet různých možností, kterými lze pro zadaný bitfield hodnoty true dosáhnout. (Aby nebylo potřeba řešit problémy s uzávorkováním a prioritami, lze problém přeformulovat tak, že hledáme počet různých booleovských výrazů v prefixovém tvaru, které mají ohodnocení true.) Například pro bitové pole 0x06 délky 3 bity existují následující možnosti:

       0x6 = 0b00000110, tedy boolovské hodnoty jsou: false true true
       
         AND false AND true true 
         AND false OR  true true
         AND false XOR true true

       * OR  false AND true true 
       * OR  false OR  true true
         OR  false XOR true true

       * XOR false AND true true 
       * XOR false OR  true true
         XOR false XOR true true

         AND AND false true true 
       * AND OR  false true true 
       * AND XOR false true true 

       * OR  AND false true true 
       * OR  OR  false true true 
       * OR  XOR false true true 

       * XOR AND false true true 
         XOR OR  false true true 
         XOR XOR false true true 
       Výsledek: 10 (kombinace s hvězdičkou)  
       

    Se vzrůstající délkou bitového pole roste počet řešení velmi rychle. Proto je pro výsledek použit datový typ CBigInt, který je schopný reprezentovat celá čísla až do délky 512 bitů. V testovacím prostředí (a v přiložené knihovně) je implementovaná funkce CountExpressions, která pro zadané bitové pole určí počet řešení. Podrobnosti o třídě CBigInt a funkci CountExpressions naleznete níže v textu.
    Jak bylo dříve řečeno, může se stát, že z fragmentů lze sestavit platnou zprávu více způsoby (funkce FindPermutations). Pokud by k tomu došlo, je potřeba výpočet z minulého bodu aplikovat na každý takto vzniklý bitfield a za řešení problému považovat maximum z těchto výsledků.

V přiložené knihovně a v testovacím prostředí na progtestu je dostupné následující:

    Třída CBigInt. Jedná se o velmi základní implementaci celých čísel s velkým rozsahem (512 bitů). Třída není optimalizovaná pro rychlost a nabízí pouze základní početní operace (násobení, sčítání, porovnání). Pro vyřešení zadané úlohy to však postačuje. Popis rozhraní třídy je v hlavičkovém souboru common.h. Předpokládáme, že tuto třídu ve své implementaci použijete. Nedoporučujeme třídu reimplementovat, je to zbytečné a není to cílem.
    Funkce CalculateCRC32 dokáže spočítat kontrolní součet CRC32 pro zadanou zprávu. Důležitou vlastností funkce je, že dokáže spočítat kontrolní součet pro libovolný počet bitů, tedy nepracuje s granularitou bajtu (implementace CRC32 algoritmu dostupné na internetu zpravidla pracují s granularitou celého bajtu). Opět předpokládáme, že ve své implementaci použijete dodanou implementaci funkce a nebudete ji reimplementovat.
    Funkce FindPermutations zkusí sestavit zadané fragmenty do výsledné zprávy a zkontroluje platnost CRC takto vzniklé zprávy. Pokud CRC souhlasí, předá sestavenou zprávu volajícímu pomocí zadaného callbacku (3. parametr). Callback dostane celou sestavenou zprávu včetně CRC, pro další zpracování proto nezapomeňte CRC přeskočit. Funkce FindPermutations je při testování dostupná pouze pro povinné a nepovinné testy. V bonusových testech je záměrně nefunkční. Pokud chcete uspět v bonusových testech, budete si funkci muset implementovat sami (navíc, navržené rozhraní funkce není pro bonusové testy úplně vhodné).
    Funkce CountExpressions vypočte počet různých způsobů, kterými lze mezi boolovské hodnoty ze vstupu umístit operátory AND, OR a XOR tak, aby vznikla hodnota true. Parametrem je bitové pole a jeho délka v bitech (pozor, v bitech). Funkce CountExpressions je při testování dostupná pouze pro povinné a nepovinné testy. V bonusových testech je záměrně nefunkční. Pokud chcete uspět v bonusových testech, budete si funkci muset implementovat sami (navíc, implementace funkce není pro bonusové testy úplně vhodná).
    Třída CReceiver, která slouží pro příjem fragmentů zpráv. Třída je čistě abstraktní - definuje rozhraní. V průběhu inicializace testovací prostředí připraví několik instancí (potomků) CReceiver, které zaregistruje (AddReceiver, viz dále). Vaše implementace bude v cyklu volat metodu CReceiver::Recv. Volání této metody zprostředkuje načtení jednoho dalšího fragmentu zprávy. Metoda CReceiver::Recv má návratovou hodnotu typu bool. Pokud vrátí true, byl další fragment načten do výstupního parametru. Pokud vrátí false, fragment načten nebyl a z této instance CReceiver už nebude načten žádný další fragment (vaše implementace tedy opustí smyčku, ve které načítá fragmenty z toho přijímače).
    Třída CTransmitter, která slouží pro odesílání vyřešených Třída je čistě abstraktní - definuje rozhraní. V průběhu inicializace testovací prostředí připraví několik instancí (potomků) CTransmitter, které zaregistruje (AddTransmitter, viz dále). Rozhraní CTransmitter nabízí dvě metody:
        Send (id, cnt). Metodu zavoláte po úspěšném vyřešení jedné instance zadaného problému. Parametrem je id (identifikátor zprávy) a cnt (počet nalezených kombinací). Každý vyřešený problém musí být sondě odeslán právě jednou. Je ale jedno, který z registrovaných vysílačů k zaslání použijete.
        Incomplete (id). Metodu zavoláte při ukončení, pokud máte přijaté fragmenty nějakých zpráv, ale zprávy již určitě nepůjde zkompletovat (protože všechny přijímače už oznámily, že další data nedodají) a byla zavolána metoda CSentinelHacker::Stop. V takové situaci dokončíte řešení problémů, které ještě vyřešit lze a řešení odevzdáte standardně metodou Send. Pokud ale zprávy nejsou kompletní, určitě již takto předávané problémy nepůjde vyřešit a pro tyto zprávy oznámíte metodou Incomplete, že je vyřešit nelze.
    Instance CTransmitter není reentrantní ani thread-safe. Z jedné instance lze najednou volat buď metodu Send, nebo metodu Incomplete. Pokud je potřeba odeslat více řešení najednou, je potřeba pro každé vysílání použít jinou instanci vysílače (pokud existují a nevysílají), nebo počkat na dokončení vysílání předchozích řešení.

Vaše řešení spočívá v implementaci třídy CSentinelHacker se zadaným rozhraním. K této vlastní třídě si můžete přidat další pomocné třídy a funkce, které při implementaci využijete. Rozhraní třídy CSentinelHacker používá některé další datové struktury, konkrétně třídy CReceiver a CTransmitter. Tyto třídy mají implementaci pevně danou, do jejich rozhraní ani implementace nesmíte zasahovat.

V programu je potřeba věnovat péči návrhu vláken. Hlavní vlákno vytvoří instanci CSentinelHacker, připraví přijímače a vysílače a spustí vlastní výpočet metodou Start. Voláním této metody vzniknou Vaše vlákna obsluhující přijímače (každý přijímač bude mít své jedno obslužné vlákno), vlákna pracovní (která budou provádět výpočetně náročné operace) a vlákna odesílací pro obsluhu jednotlivých vysílačů. Počet pracovních vláken bude předán jako parametr při volání metody CSentinelHacker::Start, počet obslužných vláken přijímačů a vysílačů je dán počtem registrovaných přijímačů a vysílačů. V programu dále mohou existovat další vlákna vytvořená a ukončovaná testovacím prostředím. Kromě pracovních vláken by ostatní vlákna neměla provádět žádné výpočetně náročné činnosti.

Po návratu z metody CSentinelHacker::Start může hlavní vlákno dělat libovolné činnosti. Vámi vytvořená vlákna v té době přijímají fragmenty, sestavují zprávy, řeší problémy a odesílají je. Hlavní vlákno nakonec zavolá metodu CSentinelHacker::Stop. Vaše implementace počká, dokud přicházejí fragmenty z vysílačů, dokončí rozpracované výpočty a předá výsledky vysílačům. Nakonec ukončíte všechna vlákna, která jste si vytvořili a vrátíte se z metody CSentinelHacker::Stop zpět do volajícího.
Třída CSentinelHacker musí mít nejméně následující metody:

SeqSolve(fragments, res)
    tato metoda slouží k sekvenčnímu otestování vlastního algoritmu (skládání fragmentů, výpočet počtu výrazů). Pro zadané pole fragmentů fragments vypočte, zda lze z fragmentů sestavit platnou zprávu. Pokud ne, metoda vrátí false. Pokud zprávu sestavit lze, provede se i výpočet počtu boolovských výrazů (výsledná hodnota bude uložena do výstupního parametru res) a metoda vrátí true. Metoda musí být implementována. Pokud nefunguje, je řešení bez dalšího testování odmítnuto. Pokud se rozhodnete využít dodané funkce FindPermutations a CountExpressions, bude implementace triviální.
AddReceiver (recv)
    metoda přidá přijímač, pomocí kterého budete získávat fragmenty zpráv. Metoda AddReceiver je volaná pouze v době, kdy ještě nebyla spuštěna Vaše vlákna (před voláním metody CSentinelHacker::Start). Samotné volání AddReceiver nebude spouštět obslužné vlákno přijímače, to ponechte až na volání metody Start.
AddTransmitter (tran)
    metoda přidá vysílač, kterému budete předávat výsledky vyřešených problémů. Metoda je volaná pouze v době, kdy ještě nebyla spuštěna Vaše vlákna (před voláním metody Start). Opět, obslužná vlákna vysílače zatím nevytvářejte, počkejte na metodu Start.
AddFragment (fragment)
    metoda je volaná asynchronně z vláken v testovacím prostředí. Tato metoda může být volaná z více vláken najednou, tedy musí být thread-safe. Jedná se o další místo, kterým jsou Vaší třídě předávané fragmenty zpráv ke zpracování. Metoda AddFragment je volaná pouze mezi CSentinelHacker::Start a CSentinelHacker::Stop (tedy není volaná před Start a není volaná po Stop).
Start(thrCnt)
    metoda spustí vlákna, zahájí obsluhu vysílačů a přijímačů. Parametrem je celé číslo thrCnt, které udává počet vytvářených pracovních vláken. Metoda nastartuje potřebný počet pracovních vláken a vrátí se zpět do volajícího. Metoda nečeká na doběhnutí vytvořených vláken.
Stop()
    metoda je volaná z hlavního vlákna, aby ukončila probíhající výpočet. Výpočet není ukončen okamžitě. Metoda počká na přečtení fragmentů ze všech přijímačů (od zavolání Stop je garantováno, že asynchronní AddFragment již nebude volaný), dokončí výpočty a předá výsledky vysílačům. Následně metoda Stop zařídí ukončení pracovních vláken a pomocných obslužných vláken. Ve chvíli, kdy již žádná Vámi vytvořená vlákna neběží, se metoda vrátí zpět do volajícího. Pozor - neukončujte v této chvíli program voláním funkce exit, pthread_exit nebo podobné. Pokud se volání Stop nevrátí do volajícího, bude Váš program označen za nefunkční.
další
    do třídy CSentinelHacker si můžete doplnit další pomocné metody a členské proměnné, které Vaše implementace použije.

Pokud se rozhodnete pro vlastní implementaci, zohledněte následující:

    algoritmus hledání pořadí fragmentů musí zkusit všechny permutace. Tedy nutně musí mít složitost T(n) ∈ O(n!), kde n je počet fragmentů. Testovací prostředí zadává rozumné počty fragmentu, tedy faktoriální složitost není problém,
    algoritmus pro nalezení počtu různých výrazů musí být rozumně efektivní, postačuje složitost T(n) ∈ O(n3), kde n je délka zpracovávaného bitového pole,
    implementace obou algoritmů by měla být rozumně efektivní, jedná se místo programu, kde se při běhu stráví většina času,
    při testování si testovací prostředí nejprve zkalibruje rychlost Vašeho řešení. Podle naměřené rychlosti pak upravuje velikost zadávaných problémů. Pokud se rychlost Vašeho řešení příliš (řádově) neliší od rychlosti očekávané (referenční), bude Váš program bez problémů otestován. Porovnejte proto rychlost své implementace s rychlostí funkce v dodané knihovně, Vaše implementace by neměla být řádově pomalejší. Při testování jsou zadávané požadavky, kde počet fragmentů nepřesahuje 12 a délka bitového pole nepřesahuje 200 bitů.

Odevzdávejte zdrojový kód s implementací požadované třídy CSentinelHacker s požadovanými metodami. Můžete samozřejmě přidat i další podpůrné třídy a funkce. Do Vaší implementace nevkládejte funkci main ani direktivy pro vkládání hlavičkových souborů. Funkci main a hlavičkové soubory lze ponechat pouze v případě, že jsou zabalené v bloku podmíněného překladu.

Využijte přiložený ukázkový soubor. Celá implementace patří do souboru solution.cpp, dodaný soubor je pouze mustr. Pokud zachováte bloky podmíněného překladu, můžete soubor solution.cpp odevzdávat jako řešení úlohy.

Při řešení lze využít pthread nebo C++11 API pro práci s vlákny (viz vložené hlavičkové soubory). Dostupný kompilátor g++ verze 8.3, tato verze kompilátoru zvládá většinu C++11, C++14 a C++17 konstrukcí.
Doporučení:

    Začněte se rovnou zabývat vlákny a synchronizací, nemusíte se zabývat vlastními algoritmy řešení zadaných problémů. Využijte dodané řešení - funkce FindPermutations a CountExpressions. Až budete mít hotovou synchronizaci, můžete začít s implementací vlastního algoritmického řešení.
    Abyste zapojili co nejvíce jader, zpracovávejte co nejvíce zpráv najednou. Fragmenty pro zprávy dodávají registrované instance CReceiver a asynchronně volaná metoda AddFragment. Je potřeba přijímat fragmenty ze všech těchto zdrojů zároveň. Protože nevíte, kdy fragmenty dorazí a zda bude fragmentů více, budete muset zkusit zprávu sestavit po příjmu každého jednoho fragmentu. Pokusy o skládání zpráv mohou běžet zároveň s hledáním počtu výrazů dříve v jiné zprávě.
    Instance CSentinelHacker je vytvářená opakovaně, pro různé vstupy. Nespoléhejte se na inicializaci globálních proměnných - při druhém a dalším zavolání budou mít globální proměnné hodnotu jinou. Je rozumné případné globální proměnné vždy inicializovat v konstruktoru nebo na začátku metody Start. Ještě lepší je nepoužívat globální proměnné vůbec.
    Nepoužívejte mutexy a podmíněné proměnné inicializované pomocí PTHREAD_MUTEX_INITIALIZER, důvod je stejný jako v minulém odstavci. Použijte raději pthread_mutex_init() nebo C++11 API.
    Instance přijímačů a vysílačů alokovalo testovací prostředí při vytváření příslušných smart pointerů. K uvolnění dojde automaticky po zrušení všech odkazů. Uvolnění těchto instancí tedy není Vaší starostí, stačí zapomenout všechny takto předané smart pointery. Váš program je ale zodpovědný za uvolnění všech ostatních prostředků, které si alokoval.
    Fragmenty musíte načítat, zpracovávat a zadané problémy musíte řešit a odevzdávat průběžně. Postup, kdy si všechny fragmenty načtete do paměťových struktur a teprve pak je začnete skládat, nebude fungovat. Takové řešení skončí deadlockem v prvním testu s více vlákny. Musíte zároveň obsluhovat všechny dodávané fragmenty (od všech přijímačů i ty dodávané asynchronně). Pokud se budete snažit nejprve načíst všechny fragmenty z přijímače A, následně z B, ..., skončíte taktéž v deadlocku.
    Volání metod ve vysílači není reentrantní ani thread-safe. Vaše implementace musí zajistit, že metody v jedné instanci vysílače budou volané postupně. Protože ale vysílání řešení trvá nenulovou dobu, budete se muset snažit zaměstnat všechny dostupné vysílače, abyste výsledky včas odeslali.
    Neukončujte metodu Stop pomocí exit, pthread_exit a podobných funkcí. Pokud se funkce Stop nevrátí do volajícího, bude Vaše implementace vyhodnocena jako nesprávná.
    Využijte přiložená vzorová data. V archivu jednak naleznete ukázku volání rozhraní a dále několik testovacích vstupů a odpovídajících výsledků.
    V testovacím prostředí je k dispozici STL. Myslete ale na to, že ten samý STL kontejner nelze najednou zpřístupnit z více vláken. Více si o omezeních přečtěte např. na C++ reference - thread safety.
    Testovací prostředí je omezené velikostí paměti. Není uplatňován žádný explicitní limit, ale VM, ve které testy běží, je omezena 4 GiB celkové dostupné RAM. Úloha může být dost paměťově náročná, zejména pokud se rozhodnete pro jemné členění úlohy na jednotlivá vlákna. Pokud se rozhodnete pro takové jemné rozčlenění úlohy, možná budete muset přidat synchronizaci běhu vláken tak, aby celková potřebná paměť v žádný okamžik nepřesáhla rozumný limit. Pro běh máte garantováno, že Váš program má k dispozici nejméně 500 MiB pro Vaše data (data segment + stack + heap). Pro zvídavé - zbytek do 4GiB je zabraný běžícím OS, dalšími procesy, zásobníky Vašich vláken a nějakou rezervou.
    Pokud se rozhodnete pro všechny bonusy, je potřeba velmi pečlivě nastavovat granularitu řešeného problému. Pokud řešený problém rozdělíte na příliš mnoho drobných podproblémů, začne se příliš mnoho uplatňovat režie. Dále, pokud máte najednou rozpracováno příliš mnoho problémů (a každý je rozdělen na velké množství podproblémů), začne se výpočet dále zpomalovat (mj. se začnou hůře využívat cache CPU). Aby se tomu zabránilo, řídí referenční řešení počet najednou rozpracovaných úloh (navíc dynamicky podle velikosti rozpracované úlohy).
    Budete-li implementovat vlastní skládání zpráv z fragmentů, tak nezapomeňte zohlednit endianitu. CRC32 ve zprávě je uložené v network byte order (big endian), funkce CalculateCRC32 vrací CRC32 jako 32 bitovou hodnotu v pořadí dle platformy (x86-64, tedy little-endian). Před porovnáním tedy budete muset provést potřebné konverze.
    Výpočetně náročné operace musí provádět pracovní vlákna. Počet pracovních vláken je určen parametrem metody Start. Testovací prostředí kontroluje, zda Vaše implementace neprovádí výpočetně náročné operace v ostatních vláknech. Pokud to zjistí, Vaše řešení bude odmítnuto.
    Explicitní nastavení počtu pracovních vláken má dobré praktické důvody. Volbou rozumného počtu pracovních vláken můžeme systém zatížit dle naší volby (tedy například podle počtu jader, která můžeme úloze přidělit). Pokud by časově náročné výpočty probíhaly i v jiných vláknech (obsluha přijímačů, vysílačů, příjem asynchronně předaných fragmentů), pak by bylo možné systém snadno zahltit, protože počet vysílačů/přijímačů nemáme jak ovlivnit.

Co znamenají jednotlivé testy:

Test algoritmu (sekvencni)
    Testovací prostředí opakovaně volá metody SeqSolve() pro různé vstupy a kontroluje vypočtené výsledky. Slouží pro otestování implementace Vašeho algoritmu. Není vytvářena instance CSentinelHacker a není volaná metoda Start. Na tomto testu můžete ověřit, zda Vaše implementace algoritmu je dostatečně rychlá. Testují se náhodně generované problémy, nejedná se o data z dodané ukázky.
Základní test
    Testovací prostředí vytváří instanci CSentinelHacker pro různý počet pracovních vláken, přijímačů a vysílačů. Ve jménu testu je pak uvedeno, kolik je pracovních vláken (W=xxx), vysílačů (T=xxx) a přijímačů (R=xxx). 
Test zahlcení
    Testovací prostředí generuje velké množství zpráv a fragmentů a kontroluje, zda si s tím Vaše implementace poradí. 
Test zrychleni vypoctu
    Testovací prostředí spouští Vaši implementaci pro ta samá vstupní data s různým počtem pracovních vláken. Měří se čas běhu (wall i CPU). S rostoucím počtem vláken by měl wall time klesat, CPU time mírně růst (vlákna mají možnost běžet na dalších CPU). Pokud wall time neklesne, nebo klesne málo (např. pro 2 vlákna by měl ideálně klesnout na 0.5, je ponechaná určitá rezerva), test není splněn.
Busy waiting (pomale prijimace)
    Do volání CReceiver::Recv testovací prostředí vkládá uspávání vlákna (např. na 100 ms). Výpočetní vlákna tím nemají práci. Pokud výpočetní vlákna nejsou synchronizovaná blokujícím způsobem, výrazně vzroste CPU time a test selže.
Busy waiting (pomale vysilace)
    Do volání CTransmitter::Send je vložena prodleva. Výpočetní vlákna tím nemají jak odesílat vypočtená řešení. Pokud výpočetní vlákna nejsou synchronizovaná blokujícím způsobem, výrazně vzroste CPU time a test selže.
Busy waiting (pomale vysilani i prijimani)
    Do volání CReceiver::Recv i CTransmitter::Send jsou vložené umělé prodlevy. Opět se testuje, zda jsou pracovní vlákna synchronizovaná blokujícím způsobem.
Rozlozeni zateze 1
    Testovací prostředí zkouší, zda se do řešení jednoho problému s větším množstvím fragmentů dokáže zapojit více pracovních vláken. Pokud chcete v tomto testu uspět, musíte Váš program navrhnout tak, aby bylo možné využít více vláken i při zpracování jediné zprávy tvořené více fragmenty. Jedná se o test bonusový, nefungují v něm dodané funkce FindPermutations a CountExpressions (ostatní dodané funkce/třídy používat lze). Dodaná implementace FindPermutations nedokáže zaměstnat více vláken, v tomto testu by stejně nevyhověla.
Rozlozeni zateze 2
    Testovací prostředí zkouší, zda se do řešení jednoho problému dokáže zapojit více pracovních vláken. Pokud chcete v tomto testu uspět, musíte Váš program navrhnout tak, aby bylo možné využít více vláken i při zpracování jediné instance problému tvořené dlouhým bitovým polem. Jedná se o test bonusový, nefungují v něm dodané funkce FindPermutations a CountExpressions (ostatní dodané funkce/třídy používat lze). Dodaná implementace CountExpressions nedokáže zaměstnat více vláken, v tomto testu by stejně nevyhověla.
